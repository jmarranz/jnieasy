; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.42 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0P@DBHJHFNL@PRUEBA?5?$CFI64d?5?6?$AA@	; `string'
PUBLIC	asm_dispatch
EXTRN	printf:PROC
;	COMDAT ??_C@_0P@DBHJHFNL@PRUEBA?5?$CFI64d?5?6?$AA@
; File c:\trabajo\empresa\desarrollo\jnieasy\src_cpp\source\asm_dispatch_i686_64_msvc.cpp
CONST	SEGMENT
??_C@_0P@DBHJHFNL@PRUEBA?5?$CFI64d?5?6?$AA@ DB 'PRUEBA %I64d ', 0aH, 00H ; `string'
; Function compile flags: /Ogtpy
CONST	ENDS
;	COMDAT asm_dispatch
_TEXT	SEGMENT
func$ = 8
stackParamSize$ = 16
args$ = 24
res_type$ = 32
resP$ = 40
conv$ = 48
asm_dispatch PROC					; COMDAT

;        push rbp
;        mov  rbp,rsp

;        push rax
;        push rcx
;        push rdx
;        push rsi

	mov rdx, stackParamSize$
	cmp rdx,0
	jz  args_done
	mov rsi, args$

	; Push the last argument first.
        sub rdx, 4
args_loop:
	mov rax, qword ptr [rsi+rdx]
	push rax
	sub rdx, 4
	cmp rdx,0
	jge SHORT args_loop

args_done:
        mov rdx,func$
	call rdx 
	; no tocamos eax pues recoge los resultados enteros de 32 bits o menor
	; ni edx para el caso de devolver entero de 64 bits en eax:edx
	mov rcx, conv$  ; conv = 0 C CALL, conv = 1 STD CALL
	cmp rcx, 0
	jnz is_stdcall

	; C call, pop argumentos
	mov rcx, stackParamSize$
        add rsp, rcx

is_stdcall:
	; Recogemos el resultado
        mov rsi, resP$
	mov rcx, res_type$
	cmp rcx,1  ; void
	je done
	cmp rcx,6  
	jle is_int32 ; jboolean,jbyte,jchar,jshort,jint
	cmp rcx,7    ; jlong
	je is_long64
	cmp rcx,8    ; jfloat
	je is_float
	cmp rcx,9    ; jdouble
	je is_double

is_int32:
	mov [rsi],rax
	jmp done	

is_long64:
	mov [rsi],rax
	mov [rsi+4],rdx
	jmp done

is_float:
	fstp dword ptr [rsi]
	jmp done

is_double:
	fstp qword ptr [rsi]
	jmp done

done:
    
; Restauración de los registros usados

;        pop rsi
;        pop rdx
;        pop rcx
;        pop rax

;        mov rsp,rbp
;        pop rbp

        ret 0

asm_dispatch ENDP
_TEXT	ENDS
END
